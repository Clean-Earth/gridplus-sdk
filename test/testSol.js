const helpers = require('./testUtil/helpers');
let client;

// describe('Connect', () => {
//   before(() => {
//     // Setup the SDK client
//     client = helpers.setupTestClient(process.env);
//   });

//   it('Should connect to a Lattice and make sure it is already paired.', async () => {
//     expect(process.env.DEVICE_ID).to.not.equal(null);
//     await helpers.connect(client, process.env.DEVICE_ID);
//     expect(client.isPaired).to.equal(true);
//     expect(client.hasActiveWallet()).to.equal(true);
//   });
// })

describe('Test transactions', () => {
  it('Should test a dummy transaction', async () => {
    // Generated by Sollet for a token creation transaction
    const TOKEN_CREATE_TX = '03d1ecb8b54aadc1646f9e0746624b14c2449b461317d422023f4fb3d2e0fd2f' +
                            '94ce52463cb41cbb4761976ef35a821460f195da1287d58c95ec2c3868088880' +
                            '0095e63e9c99ac356307324a33ed56bf4f769b345eb5bfd62ef37cf1262de424' +
                            '2e2c248d7df82f28e3ea4de04a6270cabf8d12ed29435c6782af203769138c20' +
                            '048900cd05d4d481876f89b011f0abc52eba5efd9b45263b2aa64097ca36664d' +
                            '70d00e9b4031ff01bd8feab365e6de01fa8dfe4e5628e29500a6d07149b130e7' +
                            '080300030612abd4980b2111a15d7d74f037e32db604b42321e377478210004e' +
                            '1eeeb4682c3e55a6a1859ac6d2674be919ebcc6b06ab186a46c748c7efc89b1f' +
                            '76a884223ede6dcc23232dd66817d25be3cae12efd755b64264c64c000993fff' +
                            'fc7b5d6f2406a7d517192c5c51218cc94c3d4af17f58daee089ba1fd44e3dbd9' +
                            '8a00000000000000000000000000000000000000000000000000000000000000' +
                            '000000000006ddf6e1d765a193d9cbe146ceeb79ac1cb485ed5f5b37913a8cf5' +
                            '857eff00a95acc9a1a698773b4725b48d6485c70c35128c10c5abe0b84d4cda9' +
                            'fb7e70b68d05040200013400000000604d160000000000520000000000000006' +
                            'ddf6e1d765a193d9cbe146ceeb79ac1cb485ed5f5b37913a8cf5857eff00a905' +
                            '02010343000212abd4980b2111a15d7d74f037e32db604b42321e37747821000' +
                            '4e1eeeb4682c0000000000000000000000000000000000000000000000000000' +
                            '00000000000000040200023400000000f01d1f0000000000a500000000000000' +
                            '06ddf6e1d765a193d9cbe146ceeb79ac1cb485ed5f5b37913a8cf5857eff00a9' +
                            '050402010003010105030102000907e803000000000000';

    // LOCAL TESTING
    const elliptic = require('elliptic').eddsa
    const solana = require('@solana/web3.js')
    const hdKey = require('ed25519-hd-key')
    const nacl = require('tweetnacl')
    const base58 = require('bs58')
    // derive key
    const dummySeed = Buffer.from('23c2aacffd7d1a6e6529c7c3e03e01f953afd4b62f63768bbb1493d3930e4d6d8cfde28186e687870fc8b227d0c53675ebcba019345edae79d2740053472d9e6', 'hex')
    
    const path = 'm/44\'/501\'/0\'/0\''
    const derivedSeed = hdKey.derivePath(path, dummySeed)
    console.log('Derived Seed:', derivedSeed)
    const kp = nacl.sign.keyPair.fromSeed(derivedSeed.key)
    const pubStr = Buffer.from(kp.publicKey).toString('hex')
    console.log('KeyPair pub:', pubStr)
    const account = new solana.Account(kp.secretKey)
    console.log('Signer', account.secretKey.toString('hex'))
    console.log('Pubkey', account.publicKey.toString('hex'))
    // build and sign tx
    const tx = solana.Transaction.from(Buffer.from(TOKEN_CREATE_TX, 'hex'))
    tx.partialSign(account)
    // Verify the sig
    // compile the message and hash with sha512? need to figure out how to get the correct hash
    const ed = new elliptic('ed25519')
    const valKey = ed.keyFromPublic(pubStr, 'hex')

    // Client SOL transaction function should do the following:
    // 1. Receive a hex string or buffer and attempt to create a solana transaction from it
    // 2. If we can create a transaction, convert the transaction data to a format the lattice can consume
    // -- In Lattice firmware we should implement `partialSign`: https://github.com/solana-labs/solana-web3.js/blob/master/src/transaction.ts#L483
    // 3. On receipt of signature, rebuild transaction object with sigs attached
    // 4. Run transaction._verifySignatures to validate the transaction
    // 5. Serialize the full transaction and return the buffer
  })
})